[{"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\index.tsx":"1","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\App.tsx":"2","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\header\\header.tsx":"3","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\page\\home\\home.tsx":"4","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\page\\diary\\diaryView.tsx":"5","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\page\\diary\\diaryEntry.tsx":"6","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\page\\search\\search.tsx":"7","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\testData.ts":"8","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\page\\diary\\dialyColumnOrder.ts":"9","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\commonCSS\\style.ts":"10","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\column\\columns.ts":"11","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\header\\iconLink.tsx":"12","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\column\\input\\mf_textarea.tsx":"13","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\column\\output\\mf_output.tsx":"14","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\button\\mf_button.tsx":"15","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\column\\input\\mf_picklist.tsx":"16","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\column\\input\\mf_input.tsx":"17","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\column\\input\\mf_multipicklist.tsx":"18","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\spinner\\modalSpinner.tsx":"19","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\column\\columnDef.ts":"20","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\utils\\const\\character.ts":"21","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\utils\\const\\size.ts":"22","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\utils\\format\\formatDate.ts":"23","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\utils\\const\\color.ts":"24"},{"size":277,"mtime":1645674076846,"results":"25","hashOfConfig":"26"},{"size":848,"mtime":1646141118137,"results":"27","hashOfConfig":"26"},{"size":4147,"mtime":1649599202444,"results":"28","hashOfConfig":"26"},{"size":898,"mtime":1646059638853,"results":"29","hashOfConfig":"26"},{"size":3706,"mtime":1647851792790,"results":"30","hashOfConfig":"26"},{"size":9451,"mtime":1647853251083,"results":"31","hashOfConfig":"26"},{"size":318,"mtime":1645795581489,"results":"32","hashOfConfig":"26"},{"size":445,"mtime":1647853134725,"results":"33","hashOfConfig":"26"},{"size":219,"mtime":1647850380561,"results":"34","hashOfConfig":"26"},{"size":938,"mtime":1647842648088,"results":"35","hashOfConfig":"26"},{"size":5455,"mtime":1647852250789,"results":"36","hashOfConfig":"26"},{"size":608,"mtime":1644844547102,"results":"37","hashOfConfig":"26"},{"size":1101,"mtime":1645862285746,"results":"38","hashOfConfig":"26"},{"size":876,"mtime":1645862327820,"results":"39","hashOfConfig":"26"},{"size":1097,"mtime":1647842651214,"results":"40","hashOfConfig":"26"},{"size":1044,"mtime":1645862286947,"results":"41","hashOfConfig":"26"},{"size":1032,"mtime":1645862289674,"results":"42","hashOfConfig":"26"},{"size":1246,"mtime":1645862288424,"results":"43","hashOfConfig":"26"},{"size":783,"mtime":1645363146611,"results":"44","hashOfConfig":"26"},{"size":2464,"mtime":1647852461309,"results":"45","hashOfConfig":"26"},{"size":104,"mtime":1644731954978,"results":"46","hashOfConfig":"26"},{"size":99,"mtime":1645687206214,"results":"47","hashOfConfig":"26"},{"size":362,"mtime":1647843566065,"results":"48","hashOfConfig":"26"},{"size":129,"mtime":1645688006812,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"13bzqdq",{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\index.tsx",[],["103","104"],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\App.tsx",[],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\header\\header.tsx",[],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\page\\home\\home.tsx",[],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\page\\diary\\diaryView.tsx",["105"],"import { useEffect, useState, VFC } from 'react';\r\nimport { MFButton } from 'component/button/mf_button';\r\nimport { MFOutoPut } from 'component/column/output/mf_output'\r\nimport styled from \"styled-components\";\r\nimport { StyledWrapper, StyledOuter } from 'commonCSS/style'\r\nimport { testData } from 'testData'\r\nimport { order } from 'page/diary/dialyColumnOrder'\r\nimport { Column } from 'component/column/columnDef';\r\nimport {\r\n    textColumns, \r\n    numberColumns,\r\n    dateColumns,\r\n    picklistColumns,\r\n    multiPicklistColumns,\r\n    textareaColumns\r\n} from 'component/column/columns';\r\n\r\nconst DiaryView: VFC = () => {\r\n    \r\n    const [orderedColumns, setOrderedColumns] = useState<Column[]>();\r\n\r\n    // URLパラメータからid値を取得する\r\n    // 取得値がidの正規表現に合致しない場合は新規レコード作成画面とみなす\r\n    \r\n    // ページ初期化\r\n    useEffect(()=> {       \r\n        (\r\n            async () => {\r\n                console.log('@Diary View@');\r\n                console.log('useEffect start');\r\n                // 項目定義情報の取得\r\n                const columns: Column[] = [...textColumns, ...numberColumns, ...dateColumns,...picklistColumns, ...multiPicklistColumns, ...textareaColumns];\r\n                console.log('columns');\r\n                console.log(columns);\r\n                \r\n                // サーバーから初期値を取得\r\n\r\n                // 項目「日付」のタイプガードをサーバから取得したデータに対して実施する\r\n                \r\n                // サーバーからの値をrecordに注入\r\n                for(let c of columns){\r\n                    if(testData[c.id]) c.value = testData[c.id];\r\n                }\r\n\r\n                setOrderedColumns(sortColumns(order, columns));\r\n                console.log('orderedColumns');\r\n                console.log(orderedColumns);\r\n            })()\r\n    },[])\r\n    \r\n    const sortColumns = (order:string[], columns:Column[]):Column[] => {\r\n        const result: Column[] = [];\r\n        \r\n        for( let o of order ){\r\n            for(let c of columns){\r\n                if(c.id === o){\r\n                    result.push(c);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    return (\r\n        <StyledOuter>\r\n            <StyledWrapper>\r\n                <StyledContainer>\r\n                    {orderedColumns?.map((oc)=>{\r\n                        return <MFOutoPut\r\n                                label={oc.label}\r\n                                id={oc.id}\r\n                                key={oc.id}\r\n                                value={oc.value}></MFOutoPut>\r\n                        })}\r\n                </StyledContainer>\r\n                <StyledButtonWrapper>\r\n                    <StyledButtonContainer>\r\n                        <MFButton type={'button'} disabled={false} mode={'positive'}>編集</MFButton>\r\n                    </StyledButtonContainer>\r\n                    <StyledButtonContainer>\r\n                        <MFButton type={'button'} disabled={false} mode={'negative'} hidden={true}>戻る</MFButton>\r\n                    </StyledButtonContainer>\r\n                </StyledButtonWrapper>\r\n            </StyledWrapper>\r\n        </StyledOuter>\r\n    )\r\n}\r\n\r\nconst StyledContainer =styled.div`\r\ndisplay: grid;\r\npadding-top: 100px;\r\ngrid-auto-rows: 150px;\r\ngrid-template-columns: 50% 50%;\r\n`;\r\n\r\nconst StyledButtonWrapper =styled.div`\r\nwidth: 30%;\r\nmargin: 0 auto;\r\nheight: 150px;\r\nalign-items: center;\r\njustify-content: center;\r\ndisplay: flex;\r\n`;\r\n\r\nconst StyledButtonContainer =styled.div`\r\nmargin: 0 10%;\r\n`;\r\n\r\nexport default DiaryView;","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\page\\diary\\diaryEntry.tsx",["106","107","108"],"import { useEffect, useState, VFC, SyntheticEvent } from 'react';\r\nimport { MFInput } from 'component/column/input/mf_input';\r\nimport { MFPicklist } from 'component/column/input/mf_picklist';\r\nimport { MFMultiPicklist } from 'component/column/input/mf_multipicklist';\r\nimport { MFTextarea } from 'component/column/input/mf_textarea';\r\nimport { MFButton } from 'component/button/mf_button';\r\nimport {\r\n    Column, \r\n    TextColumn, \r\n    NumberColumn, \r\n    PicklistColumn, \r\n    MultiPicklistColumn, \r\n    TextareaColumn, \r\n    isDateForInput,\r\n    DateForInput,\r\n} from 'component/column/columnDef';\r\nimport {\r\n    textColumns, \r\n    numberColumns,\r\n    picklistColumns,\r\n    multiPicklistColumns,\r\n    textareaColumns,\r\n    dateColumns\r\n} from 'component/column/columns';\r\nimport styled from \"styled-components\";\r\nimport { StyledWrapper, StyledOuter } from 'commonCSS/style'\r\n// import { testData } from 'testData'\r\nimport { order } from 'page/diary/dialyColumnOrder'\r\nimport { ModalSppiner } from 'component/spinner/modalSpinner'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { formatDate, DateFormat } from 'utils/format/formatDate'\r\nimport { Diary } from 'dataType/diary'\r\n\r\n\r\nconst DiaryEntry: VFC = () => {\r\n    // 各項目のuseStateを宣言\r\n    const [date, setDate] = useState(formatDate(new Date(), DateFormat.YYYY_MM_DD));\r\n    const [place, setPlace] = useState('');\r\n    const [caughtFish, setCaughtFish] = useState(['']);\r\n    const [comment, setComment] = useState('');\r\n    const [rod, setRod] = useState(['']);\r\n    const [method, setMethod] = useState(['']);\r\n    const [lure, setLure] = useState(['']);\r\n    const [weather, setWeather] = useState('');\r\n    const [wind, setWind] = useState(0);\r\n    const [tide, setTide] = useState('');\r\n\r\n    const [orderedColumns, setOrderedColumns] = useState<Column[]>();\r\n    const [isLoad, setIsLoad] = useState<boolean>(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    // URLパラメータからid値を取得する\r\n    // 取得値がidの正規表現に合致しない場合は新規レコード作成画面とみなす\r\n\r\n    // ページ初期化\r\n    useEffect(()=> {       \r\n        (\r\n            async () => {\r\n                console.log('useEffect start');\r\n                // 項目定義情報の取得\r\n                const columns: Column[] = [...textColumns, ...numberColumns, ...dateColumns, ...picklistColumns, ...multiPicklistColumns, ...textareaColumns];\r\n            \r\n                // ここから編集時のみの処理\r\n                    // サーバーから初期値を取得 await\r\n\r\n                    // サーバーからの値をrecordに注入\r\n                    // for(let c of columns){\r\n                    //     if(testData[c.id]) c.value = testData[c.id];\r\n                    // }\r\n\r\n                    // 初期値を各stateにセット\r\n                    // setPlace(testData.place ?? '');\r\n                    // setCaughtFish(testData.caughtFish ?? []);\r\n                    // setComment(testData.comment ?? '');\r\n                    // setRod(testData.rod ?? []);\r\n                    // setMethod(testData.method ?? []);\r\n                    // setLure(testData.lure ?? []);\r\n                    // setWeather(testData.weather ?? '');\r\n                    // setWind(testData.wind ?? 0);\r\n                    // setTide(testData.tide ?? '');\r\n                //ここまで編集時のみの処理\r\n                \r\n                // columnOrderの順に項目の並び替え\r\n                injectHandleChange(columns);\r\n                setOrderedColumns(sortColumns(order, columns));\r\n                console.log(orderedColumns);\r\n            })()\r\n    },[])\r\n        \r\n    const sortColumns = (order:string[], columns:Column[]):Column[] => {\r\n        const result: Column[] = [];\r\n        \r\n        for( let o of order ){\r\n            for(let c of columns){\r\n                if(c.id === o){\r\n                    result.push(c);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    const injectHandleChange = (columns:Column[]):void => {\r\n        for(let c of columns){\r\n            if(c.id === 'date') c.handleChange = setDate;\r\n            if(c.id === 'place') c.handleChange = setPlace;\r\n            if(c.id === 'caughtFish') c.handleChange = setCaughtFish;\r\n            if(c.id === 'comment') c.handleChange = setComment;\r\n            if(c.id === 'rod') c.handleChange = setRod;\r\n            if(c.id === 'method') c.handleChange = setMethod;\r\n            if(c.id === 'lure') c.handleChange = setLure;\r\n            if(c.id === 'weather') c.handleChange = setWeather;\r\n            if(c.id === 'wind') c.handleChange = setWind;\r\n            if(c.id === 'tide') c.handleChange = setTide;\r\n        }\r\n    }\r\n    \r\n    const submit =async (e: SyntheticEvent)=> {\r\n        console.log('★submit★');\r\n        setIsLoad(true);\r\n        e.preventDefault();\r\n        const data: Diary = {\r\n            date: (isDateForInput(date)) ? date : undefined ,\r\n            place: place,\r\n            caughtFish: caughtFish,\r\n            comment: comment,\r\n            rod: rod,\r\n            method: method,\r\n            lure: lure,\r\n            weather: weather,\r\n            wind: wind,\r\n            tide: tide\r\n        }\r\n        console.log('data');\r\n        console.log(data);\r\n        navigate('/view', { state: { id:1 }});\r\n    }\r\n\r\n\r\n    return (\r\n        <StyledOuter>\r\n            {isLoad && <ModalSppiner height={100} width={100} />}\r\n            <StyledWrapper>\r\n                <form method=\"post\" onSubmit={ submit } >\r\n                    <StyledContainer>\r\n                            {orderedColumns?.map((oc)=>{\r\n                                if(isInput(oc)){\r\n                                    console.log(oc.value);\r\n                                    return <MFInput\r\n                                        label={oc.label}\r\n                                        id={oc.id}\r\n                                        input={oc.input}\r\n                                        key={oc.id}\r\n                                        value={oc.value}\r\n                                        handleChange={oc.handleChange}></MFInput>\r\n                                }else if(isPickList(oc)){\r\n                                    console.log(oc.value);\r\n                                    return <MFPicklist\r\n                                        label={oc.label}\r\n                                        id={oc.id}\r\n                                        select={oc.select}\r\n                                        options={oc.options}\r\n                                        key={oc.id}\r\n                                        value={oc.value}\r\n                                        handleChange={oc.handleChange}></MFPicklist>\r\n                                }else if(isMultiPickList(oc)){\r\n                                    console.log(oc.value);\r\n                                    return <MFMultiPicklist\r\n                                        label={oc.label}\r\n                                        id={oc.id}\r\n                                        select={oc.select}\r\n                                        options={oc.options}\r\n                                        key={oc.id}\r\n                                        value={oc.value}\r\n                                        handleChange={oc.handleChange}></MFMultiPicklist>\r\n                                }else if(isTextarea(oc)){\r\n                                    return <MFTextarea\r\n                                        label={oc.label}\r\n                                        id={oc.id}\r\n                                        textarea={oc.textarea}\r\n                                        key={oc.id}\r\n                                        value={oc.value}\r\n                                        handleChange={oc.handleChange}></MFTextarea>\r\n                                }\r\n                            })}\r\n                    </StyledContainer>\r\n                <StyledButtonWrapper>\r\n                    <StyledButtonContainer>\r\n                        <MFButton type={'submit'} disabled={false} mode={'positive'} hidden={false} >保存</MFButton>\r\n                    </StyledButtonContainer>\r\n                    <StyledButtonContainer>\r\n                        <MFButton type={'button'} disabled={false} mode={'negative'} hidden={false} >戻る</MFButton>\r\n                    </StyledButtonContainer>\r\n                </StyledButtonWrapper>\r\n                </form>\r\n            </StyledWrapper>\r\n        </StyledOuter>\r\n    )\r\n}\r\n\r\n\r\nconst isInput = (column: Column): column is (TextColumn | NumberColumn) => column.type === 'input';\r\nconst isPickList = (column: Column): column is PicklistColumn => column.type === 'picklist';\r\nconst isMultiPickList = (column: Column): column is MultiPicklistColumn => column.type === 'multipicklist';\r\nconst isTextarea = (column: Column): column is TextareaColumn => column.type === 'textarea';\r\n\r\nconst StyledContainer =styled.div`\r\ndisplay: grid;\r\npadding-top: 100px;\r\ngrid-auto-rows: 150px;\r\ngrid-template-columns: 50% 50%;\r\n`;\r\n\r\nconst StyledButtonWrapper =styled.div`\r\nwidth: 30%;\r\nmargin: 0 auto;\r\nheight: 150px;\r\nalign-items: center;\r\njustify-content: center;\r\ndisplay: flex;\r\nz-index: 0;\r\n`;\r\n\r\nconst StyledButtonContainer =styled.div`\r\nmargin: 0 10%;\r\n`;\r\n\r\nexport default DiaryEntry;","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\page\\search\\search.tsx",[],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\testData.ts",[],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\page\\diary\\dialyColumnOrder.ts",[],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\commonCSS\\style.ts",[],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\column\\columns.ts",[],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\header\\iconLink.tsx",[],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\column\\input\\mf_textarea.tsx",[],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\column\\output\\mf_output.tsx",[],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\button\\mf_button.tsx",[],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\column\\input\\mf_picklist.tsx",[],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\column\\input\\mf_input.tsx",[],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\column\\input\\mf_multipicklist.tsx",[],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\spinner\\modalSpinner.tsx",[],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\component\\column\\columnDef.ts",["109","110"],"import { Options, MultiOptions } from 'component/column/input/pickListValueDef'\r\nimport { DiaryId } from 'dataType/diary'\r\n\r\nexport type ValueType = string | string[] | number | DateForInput\r\nexport type BaseColumnProps = {\r\n    label: string,\r\n    id: ColumnId,\r\n    value?: ValueType,\r\n}\r\n\r\nexport type Picklist = {\r\n    select: {\r\n        name: string,\r\n        required?: boolean,\r\n    },\r\n    options: Options[],\r\n}\r\n\r\nexport type MultiPicklist = {\r\n    select: {\r\n        name: string,\r\n        required?: boolean,\r\n    },\r\n    options: MultiOptions[],\r\n}\r\n\r\nexport type InputType = 'text' | 'number' | 'date'\r\nexport type Input<T extends InputType> = {\r\n    input: {\r\n        type:T,\r\n        name: string,\r\n        required?: boolean,\r\n        placeholder?: string,\r\n        disabled?: boolean,\r\n        maxlength?: number,\r\n    },\r\n    value?: T extends 'text'\r\n        ? string\r\n        : T extends 'number'\r\n        ? number\r\n        : T extends 'date'\r\n        ? DateForInput\r\n        : never,\r\n}\r\n\r\nexport type Textarea = {\r\n    textarea: {\r\n        name: string,\r\n        required?: boolean,\r\n        placeolder?: string,\r\n        rows?: number,\r\n        cols?: number,\r\n        disabled?: boolean,\r\n        maxlength?: number,\r\n    },\r\n}\r\n\r\n\r\ntype HandleChange = { handleChange?: any }\r\nexport type PicklistProps = Picklist & BaseColumnProps & HandleChange\r\nexport type MultiPicklistProps = MultiPicklist & BaseColumnProps & HandleChange\r\nexport type InputProps<T extends InputType> = Input<T> & BaseColumnProps & HandleChange\r\nexport type TextareaProps = Textarea & BaseColumnProps & HandleChange\r\n\r\ntype ColumnType = { type: 'input' | 'picklist' | 'multipicklist' |'textarea' }\r\nexport type Column = ( TextColumn | NumberColumn | DateColumn |PicklistColumn | MultiPicklistColumn | TextareaColumn );\r\nexport type TextColumn = InputProps<'text'> & ColumnType\r\nexport type NumberColumn = InputProps<'number'> & ColumnType\r\nexport type DateColumn = InputProps<'date'> & ColumnType\r\nexport type PicklistColumn = PicklistProps & ColumnType\r\nexport type MultiPicklistColumn = MultiPicklistProps & ColumnType\r\nexport type TextareaColumn = TextareaProps & ColumnType\r\n\r\ntype ColumnId = DiaryId\r\n\r\ndeclare const dateSymbol: unique symbol\r\nexport type DateForInput = string & { [dateSymbol]: never }\r\nexport const isDateForInput = (value: string): value is DateForInput => {\r\n    return /^[0-9]{4}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/.test(value);\r\n}","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\utils\\const\\character.ts",["111"],"export default  {\r\n    FONT:'メイリオ',\r\n    SIZE:{SMALL: 10, BASE: 12, LARGE: 16, XLARGE:20}\r\n}\r\n\r\n","C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\utils\\const\\size.ts",[],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\utils\\format\\formatDate.ts",[],"C:\\Users\\klose\\workspace\\myfishing\\frontend\\src\\utils\\const\\color.ts",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":49,"column":7,"nodeType":"118","endLine":49,"endColumn":9,"suggestions":"119"},{"ruleId":"120","severity":1,"message":"121","line":15,"column":5,"nodeType":"122","messageId":"123","endLine":15,"endColumn":17},{"ruleId":"116","severity":1,"message":"117","line":89,"column":7,"nodeType":"118","endLine":89,"endColumn":9,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":148,"column":54,"nodeType":"127","messageId":"128","endLine":148,"endColumn":56},{"ruleId":"129","severity":1,"message":"130","line":79,"column":22,"nodeType":"131","messageId":"132","endLine":79,"endColumn":23,"suggestions":"133"},{"ruleId":"129","severity":1,"message":"130","line":79,"column":39,"nodeType":"131","messageId":"132","endLine":79,"endColumn":40,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":1,"column":1,"nodeType":"137","endLine":4,"endColumn":2},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'orderedColumns'. Either include it or remove the dependency array.","ArrayExpression",["140"],"@typescript-eslint/no-unused-vars","'DateForInput' is defined but never used.","Identifier","unusedVar",["141"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["142","143"],["144","145"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"146","fix":"147"},{"desc":"146","fix":"148"},{"messageId":"149","fix":"150","desc":"151"},{"messageId":"152","fix":"153","desc":"154"},{"messageId":"149","fix":"155","desc":"151"},{"messageId":"152","fix":"156","desc":"154"},"Update the dependencies array to be: [orderedColumns]",{"range":"157","text":"158"},{"range":"159","text":"158"},"removeEscape",{"range":"160","text":"161"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"162","text":"163"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"164","text":"161"},{"range":"165","text":"163"},[1700,1702],"[orderedColumns]",[3431,3433],[2403,2404],"",[2403,2403],"\\",[2420,2421],[2420,2420]]