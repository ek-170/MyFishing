{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\klose\\\\workspace\\\\myfishing\\\\frontend\\\\src\\\\component\\\\column\\\\input\\\\mf_multipicklist.tsx\";\nimport styled from \"styled-components\";\nimport { StyledItem, StyledLabel } from 'commonCSS/style';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MFMultiPicklist = _ref => {\n  var _select$required;\n\n  let {\n    label,\n    id,\n    select,\n    value,\n    options,\n    handleChange\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(StyledItem, {\n    children: [/*#__PURE__*/_jsxDEV(StyledLabel, {\n      htmlFor: id,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(StyledSelect, {\n      id: id,\n      name: select.name,\n      multiple: true,\n      defaultValue: value,\n      required: (_select$required = select.required) !== null && _select$required !== void 0 ? _select$required : false,\n      onChange: e => handleChange(getValue(e.target.options)),\n      children: options.map(o => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: o.value,\n        children: o.text\n      }, o.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n};\n_c = MFMultiPicklist;\n\nconst getValue = options => {\n  const values = [];\n\n  for (let i = 0; i < options.length; i++) {\n    if (options[i].selected) values.push(options[i].value);\n  }\n\n  return values;\n};\n\nconst StyledSelect = styled.select`\nwidth: 300px;\nheight: auto;\nborder-radius: 5px;\nborder: 0.2px solid #9c9c9c;\n`;\n_c2 = StyledSelect;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MFMultiPicklist\");\n$RefreshReg$(_c2, \"StyledSelect\");","map":{"version":3,"sources":["C:/Users/klose/workspace/myfishing/frontend/src/component/column/input/mf_multipicklist.tsx"],"names":["styled","StyledItem","StyledLabel","MFMultiPicklist","label","id","select","value","options","handleChange","name","required","e","getValue","target","map","o","text","values","i","length","selected","push","StyledSelect"],"mappings":";AACA,OAAOA,MAAP,MAAmB,mBAAnB;AAEA,SAAQC,UAAR,EAAoBC,WAApB,QAAsC,iBAAtC;;AAEA,OAAO,MAAMC,eAAwC,GAAG,QAAmD;AAAA;;AAAA,MAAlD;AAACC,IAAAA,KAAD;AAAOC,IAAAA,EAAP;AAAUC,IAAAA,MAAV;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA,OAAxB;AAAiCC,IAAAA;AAAjC,GAAkD;AACvG,sBACI,QAAC,UAAD;AAAA,4BACI,QAAC,WAAD;AAAa,MAAA,OAAO,EAAEJ,EAAtB;AAAA,gBAA2BD;AAA3B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,YAAD;AACI,MAAA,EAAE,EAAEC,EADR;AAEI,MAAA,IAAI,EAAEC,MAAM,CAACI,IAFjB;AAGI,MAAA,QAAQ,MAHZ;AAII,MAAA,YAAY,EAAEH,KAJlB;AAKI,MAAA,QAAQ,sBAAED,MAAM,CAACK,QAAT,+DAAqB,KALjC;AAMI,MAAA,QAAQ,EAAEC,CAAC,IAAIH,YAAY,CAACI,QAAQ,CAACD,CAAC,CAACE,MAAF,CAASN,OAAV,CAAT,CAN/B;AAAA,gBAQKA,OAAO,CAACO,GAAR,CAAaC,CAAD,iBACT;AAAQ,QAAA,KAAK,EAAEA,CAAC,CAACT,KAAjB;AAAA,kBAAuCS,CAAC,CAACC;AAAzC,SAA6BD,CAAC,CAACT,KAA/B;AAAA;AAAA;AAAA;AAAA,cADH;AARL;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CAlBM;KAAMJ,e;;AAoBb,MAAMU,QAAQ,GAAIL,OAAD,IAAmC;AAChD,QAAMU,MAAe,GAAG,EAAxB;;AACA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACX,OAAO,CAACY,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,QAAGX,OAAO,CAACW,CAAD,CAAP,CAAWE,QAAd,EAAwBH,MAAM,CAACI,IAAP,CAAYd,OAAO,CAACW,CAAD,CAAP,CAAWZ,KAAvB;AAC3B;;AACD,SAAOW,MAAP;AACH,CAND;;AAQA,MAAMK,YAAY,GAAEvB,MAAM,CAACM,MAAO;AAClC;AACA;AACA;AACA;AACA,CALA;MAAMiB,Y","sourcesContent":["import { VFC } from 'react';\r\nimport styled from \"styled-components\";\r\nimport { MultiPicklistProps } from 'component/column/columnDef'\r\nimport {StyledItem, StyledLabel} from 'commonCSS/style';\r\n\r\nexport const MFMultiPicklist: VFC<MultiPicklistProps> = ({label,id,select,value, options, handleChange}) =>{\r\n    return(\r\n        <StyledItem>\r\n            <StyledLabel htmlFor={id}>{label}</StyledLabel>\r\n            <StyledSelect\r\n                id={id}\r\n                name={select.name}\r\n                multiple\r\n                defaultValue={value}\r\n                required={select.required ?? false}\r\n                onChange={e => handleChange(getValue(e.target.options))}\r\n            >\r\n                {options.map((o)=>(\r\n                    <option value={o.value} key={o.value}>{o.text}</option>\r\n                    ))}\r\n            </StyledSelect>\r\n        </StyledItem>\r\n    )\r\n}\r\n\r\nconst getValue = (options: HTMLOptionsCollection)=> {\r\n    const values:string[] = [];\r\n    for (let i=0; i<options.length; i++ ){\r\n        if(options[i].selected) values.push(options[i].value);\r\n    }\r\n    return values;\r\n}\r\n\r\nconst StyledSelect =styled.select`\r\nwidth: 300px;\r\nheight: auto;\r\nborder-radius: 5px;\r\nborder: 0.2px solid #9c9c9c;\r\n`;"]},"metadata":{},"sourceType":"module"}