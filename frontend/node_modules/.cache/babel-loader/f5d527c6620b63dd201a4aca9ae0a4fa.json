{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\klose\\\\workspace\\\\myfishing\\\\src\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // Squareの中身の型、XかOか空（null）の3通り\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst calculateWinner = squares => {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n};\n\nconst Square = props => {\n  const {\n    value,\n    onClick\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    className: \"square\",\n    onClick: onClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Square;\n\nconst Board = props => {\n  const {\n    squares,\n    onClick\n  } = props;\n\n  const renderSquare = i => /*#__PURE__*/_jsxDEV(Square, {\n    value: squares[i],\n    onClick: () => onClick(i)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [renderSquare(0), renderSquare(1), renderSquare(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [renderSquare(3), renderSquare(4), renderSquare(5)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [renderSquare(6), renderSquare(7), renderSquare(8)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Board;\n\nconst Game = () => {\n  _s();\n\n  const [history, setHistory] = useState([{\n    squares: Array(9).fill(null)\n  }]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXIsNext] = useState(true);\n\n  const handleClick = i => {\n    const historySlice = history.slice(0, stepNumber + 1);\n    const current = historySlice[historySlice.length - 1];\n    const squares = current.squares.slice(); // 勝者確定かマスが埋まっていたら、クリックしてもマスが変化しないようにする\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = xIsNext ? 'X' : 'O';\n    setHistory([...historySlice, {\n      squares\n    }]);\n    setStepNumber(historySlice.length);\n    setXIsNext(!xIsNext);\n  };\n\n  const jumpTo = step => {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n  };\n\n  const currentHistory = [...history];\n  const current = currentHistory[stepNumber];\n  const winner = calculateWinner(current.squares);\n  const moves = history.map((step, move) => {\n    const desc = move ? `Go to move #${move}` : 'Go to game start';\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => jumpTo(move),\n        children: desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, move.toString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this);\n  });\n  const status = winner ? `Winner: ${winner}` : `Next player: ${xIsNext ? 'X' : 'O'}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        squares: current.squares,\n        onClick: i => handleClick(i)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}; // ========================================\n\n\n_s(Game, \"nQo2AW4FV5ep8k4cMplZ5kwIqd4=\");\n\n_c3 = Game;\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 138,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"sources":["C:/Users/klose/workspace/myfishing/src/index.tsx"],"names":["useState","ReactDOM","calculateWinner","squares","lines","i","length","a","b","c","Square","props","value","onClick","Board","renderSquare","Game","history","setHistory","Array","fill","stepNumber","setStepNumber","xIsNext","setXIsNext","handleClick","historySlice","slice","current","jumpTo","step","currentHistory","winner","moves","map","move","desc","toString","status","render","document","getElementById"],"mappings":"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","sourcesContent":["import { VFC, useState, ReactElement } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n// Squareの中身の型、XかOか空（null）の3通り\r\ntype FillSquare = 'X' | 'O' | null;\r\n\r\ntype SquareProps = {\r\n  value: FillSquare;\r\n  onClick: () => void;\r\n};\r\n\r\ntype BoardProps = {\r\n  squares: FillSquare[];\r\n  onClick: (i: number) => void;\r\n};\r\n\r\nconst calculateWinner = (squares: FillSquare[]) => {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i += 1) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst Square: VFC<SquareProps> = (props) => {\r\n  const { value, onClick } = props;\r\n\r\n  return (\r\n    <button type=\"button\" className=\"square\" onClick={onClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst Board: VFC<BoardProps> = (props) => {\r\n  const { squares, onClick } = props;\r\n\r\n  const renderSquare = (i: number): ReactElement => (\r\n    <Square value={squares[i]} onClick={() => onClick(i)} />\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(0)}\r\n        {renderSquare(1)}\r\n        {renderSquare(2)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(3)}\r\n        {renderSquare(4)}\r\n        {renderSquare(5)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(6)}\r\n        {renderSquare(7)}\r\n        {renderSquare(8)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Game: VFC = () => {\r\n  const [history, setHistory] = useState([{ squares: Array(9).fill(null) }]);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n\r\n  const handleClick = (i: number): void => {\r\n    const historySlice = history.slice(0, stepNumber + 1);\r\n    const current = historySlice[historySlice.length - 1];\r\n    const squares = current.squares.slice();\r\n\r\n    // 勝者確定かマスが埋まっていたら、クリックしてもマスが変化しないようにする\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    squares[i] = xIsNext ? 'X' : 'O';\r\n    setHistory([...historySlice, { squares }]);\r\n    setStepNumber(historySlice.length);\r\n    setXIsNext(!xIsNext);\r\n  };\r\n\r\n  const jumpTo = (step: number) => {\r\n    setStepNumber(step);\r\n    setXIsNext(step % 2 === 0);\r\n  };\r\n\r\n  const currentHistory = [...history];\r\n  const current = currentHistory[stepNumber];\r\n  const winner = calculateWinner(current.squares);\r\n\r\n  const moves = history.map((step, move) => {\r\n    const desc = move ? `Go to move #${move}` : 'Go to game start';\r\n\r\n    return (\r\n      <li key={move.toString()}>\r\n        <button type=\"button\" onClick={() => jumpTo(move)}>\r\n          {desc}\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  const status = winner\r\n    ? `Winner: ${winner}`\r\n    : `Next player: ${xIsNext ? 'X' : 'O'}`;\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board squares={current.squares} onClick={(i) => handleClick(i)} />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <div>{status}</div>\r\n        <ol>{moves}</ol>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById('root'));"]},"metadata":{},"sourceType":"module"}