{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\klose\\\\workspace\\\\myfishing\\\\src\\\\component\\\\form\\\\recordEntryForm.tsx\";\nimport { MFPicklist } from 'component/column/mf_picklist';\nimport { MFInput } from 'component/column/mf_input';\nimport { MFTextarea } from 'component/column/mf_textarea';\nimport { textColumns, numberColumns, picklistColumns, textareaColumns } from 'component/column/columnDef';\nimport styled from \"styled-components\";\nimport { header } from 'const/size';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RecordEntryForm = () => {\n  const order = ['place', 'wind', 'caughtFish', 'comment'];\n  const columns = [...textColumns, ...numberColumns, ...picklistColumns, ...textareaColumns];\n  const orderedColumns = sortColumns(order, columns);\n  return /*#__PURE__*/_jsxDEV(StyledWrapper, {\n    children: orderedColumns.map(oc => {\n      if (isInput(oc)) {\n        return /*#__PURE__*/_jsxDEV(MFInput, {\n          label: oc.label,\n          id: oc.id,\n          input: oc.input\n        }, oc.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 28\n        }, this);\n      } else if (isPickList(oc)) {\n        return /*#__PURE__*/_jsxDEV(MFPicklist, {\n          label: oc.label,\n          id: oc.id,\n          select: oc.select,\n          options: oc.options\n        }, oc.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 28\n        }, this);\n      } else if (isTextarea(oc)) {\n        return /*#__PURE__*/_jsxDEV(MFTextarea, {\n          label: oc.label,\n          id: oc.id,\n          textarea: oc.textarea\n        }, oc.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 28\n        }, this);\n      }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_c = RecordEntryForm;\n\nconst sortColumns = (order, columns) => {\n  const orderedColumns = [];\n\n  for (let o of order) {\n    for (let c of columns) {\n      if (o === c.id) {\n        orderedColumns.push(c);\n        break;\n      }\n    }\n  }\n\n  console.log(orderedColumns);\n  return orderedColumns;\n};\n\nconst isInput = column => column.type === 'input';\n\nconst isPickList = column => column.type === 'picklist';\n\nconst isTextarea = column => column.type === 'textarea';\n\nconst StyledWrapper = styled.div`\nmargin-top: ${header.height};\n`;\n_c2 = StyledWrapper;\nexport default RecordEntryForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RecordEntryForm\");\n$RefreshReg$(_c2, \"StyledWrapper\");","map":{"version":3,"sources":["C:/Users/klose/workspace/myfishing/src/component/form/recordEntryForm.tsx"],"names":["MFPicklist","MFInput","MFTextarea","textColumns","numberColumns","picklistColumns","textareaColumns","styled","header","RecordEntryForm","order","columns","orderedColumns","sortColumns","map","oc","isInput","label","id","input","isPickList","select","options","isTextarea","textarea","o","c","push","console","log","column","type","StyledWrapper","div","height"],"mappings":";AACA,SAASA,UAAT,QAA2B,8BAA3B;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,UAAT,QAA2B,8BAA3B;AACA,SAASC,WAAT,EAAsBC,aAAtB,EAAqCC,eAArC,EAAsDC,eAAtD,QAAuI,4BAAvI;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,MAAT,QAAuB,YAAvB;;;AAIA,MAAMC,eAAoB,GAAG,MAAM;AAC/B,QAAMC,KAAe,GAAG,CACpB,OADoB,EAEpB,MAFoB,EAGpB,YAHoB,EAIpB,SAJoB,CAAxB;AAOA,QAAMC,OAAiB,GAAG,CAAC,GAAGR,WAAJ,EAAiB,GAAGC,aAApB,EAAmC,GAAGC,eAAtC,EAAuD,GAAGC,eAA1D,CAA1B;AACA,QAAMM,cAAwB,GAAGC,WAAW,CAACH,KAAD,EAAQC,OAAR,CAA5C;AAEA,sBACI,QAAC,aAAD;AAAA,cACKC,cAAc,CAACE,GAAf,CAAoBC,EAAD,IAAM;AACtB,UAAIC,OAAO,CAACD,EAAD,CAAX,EAAiB;AACb,4BAAO,QAAC,OAAD;AAAS,UAAA,KAAK,EAAEA,EAAE,CAACE,KAAnB;AAA0B,UAAA,EAAE,EAAEF,EAAE,CAACG,EAAjC;AAAqC,UAAA,KAAK,EAAEH,EAAE,CAACI;AAA/C,WAA2DJ,EAAE,CAACG,EAA9D;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFD,MAEM,IAAIE,UAAU,CAACL,EAAD,CAAd,EAAoB;AACtB,4BAAO,QAAC,UAAD;AAAY,UAAA,KAAK,EAAEA,EAAE,CAACE,KAAtB;AAA6B,UAAA,EAAE,EAAEF,EAAE,CAACG,EAApC;AAAwC,UAAA,MAAM,EAAEH,EAAE,CAACM,MAAnD;AAA2D,UAAA,OAAO,EAAEN,EAAE,CAACO;AAAvE,WAAqFP,EAAE,CAACG,EAAxF;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFK,MAEA,IAAIK,UAAU,CAACR,EAAD,CAAd,EAAmB;AACrB,4BAAO,QAAC,UAAD;AAAY,UAAA,KAAK,EAAEA,EAAE,CAACE,KAAtB;AAA6B,UAAA,EAAE,EAAEF,EAAE,CAACG,EAApC;AAAwC,UAAA,QAAQ,EAAEH,EAAE,CAACS;AAArD,WAAoET,EAAE,CAACG,EAAvE;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH;AACJ,KARA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAxBD;;KAAMT,e;;AA0BN,MAAMI,WAAW,GAAG,CAACH,KAAD,EAAiBC,OAAjB,KAA+C;AAC/D,QAAMC,cAAwB,GAAG,EAAjC;;AAEA,OAAK,IAAIa,CAAT,IAAcf,KAAd,EAAqB;AACjB,SAAI,IAAIgB,CAAR,IAAaf,OAAb,EAAqB;AACjB,UAAGc,CAAC,KAAKC,CAAC,CAACR,EAAX,EAAc;AACVN,QAAAA,cAAc,CAACe,IAAf,CAAoBD,CAApB;AACA;AACH;AACJ;AACJ;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAYjB,cAAZ;AACA,SAAOA,cAAP;AACH,CAbD;;AAeA,MAAMI,OAAO,GAAIc,MAAD,IAA2DA,MAAM,CAACC,IAAP,KAAgB,OAA3F;;AACA,MAAMX,UAAU,GAAIU,MAAD,IAA8CA,MAAM,CAACC,IAAP,KAAgB,UAAjF;;AACA,MAAMR,UAAU,GAAIO,MAAD,IAA8CA,MAAM,CAACC,IAAP,KAAgB,UAAjF;;AAEA,MAAMC,aAAa,GAAEzB,MAAM,CAAC0B,GAAI;AAChC,cAAczB,MAAM,CAAC0B,MAAO;AAC5B,CAFA;MAAMF,a;AAIN,eAAevB,eAAf","sourcesContent":["import { VFC } from 'react';\r\nimport { MFPicklist } from 'component/column/mf_picklist';\r\nimport { MFInput } from 'component/column/mf_input';\r\nimport { MFTextarea } from 'component/column/mf_textarea';\r\nimport { textColumns, numberColumns, picklistColumns, textareaColumns, TextColumn, NumberColumn, PicklistColumn, TextareaColumn } from 'component/column/columnDef';\r\nimport styled from \"styled-components\";\r\nimport { header } from 'const/size';\r\n\r\ntype Column = ( TextColumn | NumberColumn | PicklistColumn | TextareaColumn);\r\n\r\nconst RecordEntryForm: VFC = () => {\r\n    const order: string[] = [\r\n        'place',\r\n        'wind',\r\n        'caughtFish',\r\n        'comment',\r\n    ];\r\n\r\n    const columns: Column[] = [...textColumns, ...numberColumns, ...picklistColumns, ...textareaColumns];\r\n    const orderedColumns: Column[] = sortColumns(order, columns);\r\n    \r\n    return (\r\n        <StyledWrapper>\r\n            {orderedColumns.map((oc)=>{\r\n                if( isInput(oc) ){\r\n                    return <MFInput label={oc.label} id={oc.id} input={oc.input} key={oc.id}></MFInput>\r\n                }else if( isPickList(oc) ){\r\n                    return <MFPicklist label={oc.label} id={oc.id} select={oc.select} options={oc.options} key={oc.id}></MFPicklist>\r\n                }else if( isTextarea(oc)){\r\n                    return <MFTextarea label={oc.label} id={oc.id} textarea={oc.textarea} key={oc.id}></MFTextarea>\r\n                }\r\n            })}\r\n        </StyledWrapper>\r\n    )\r\n}\r\n\r\nconst sortColumns = (order:string[], columns:Column[]):Column[] => {\r\n    const orderedColumns: Column[] = [];\r\n\r\n    for( let o of order ){\r\n        for(let c of columns){\r\n            if(o === c.id){\r\n                orderedColumns.push(c);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    console.log(orderedColumns);\r\n    return orderedColumns;\r\n}\r\n\r\nconst isInput = (column: Column): column is (TextColumn | NumberColumn) => column.type === 'input';\r\nconst isPickList = (column: Column): column is PicklistColumn => column.type === 'picklist';\r\nconst isTextarea = (column: Column): column is TextareaColumn => column.type === 'textarea';\r\n\r\nconst StyledWrapper =styled.div`\r\nmargin-top: ${header.height};\r\n`;\r\n\r\nexport default RecordEntryForm;"]},"metadata":{},"sourceType":"module"}