{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\klose\\\\workspace\\\\myfishing\\\\src\\\\component\\\\form\\\\recordEntryForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { MFPicklist } from 'component/column/mf_picklist';\nimport { MFInput } from 'component/column/mf_input';\nimport { MFTextarea } from 'component/column/mf_textarea';\nimport { textColumns, numberColumns, picklistColumns, textareaColumns } from 'component/column/columns';\nimport styled from \"styled-components\";\nimport { header, container } from 'const/size';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RecordEntryForm = () => {\n  _s();\n\n  // 各項目のuseStateを宣言\n  const [place, setPlace] = useState('');\n  const [wind, setWind] = useState(0);\n  const [caughtFish, setCaughtFIsh] = useState(['']);\n  const [commnet, setComment] = useState(''); // テストで初期値としてvalueを設定\n  // 実際はサーバから初期値を取得する\n\n  const record = [{\n    id: 'place',\n    value: '大洗漁港',\n    handleChange: setPlace\n  }, {\n    id: 'wind',\n    value: 5,\n    handleChange: setWind\n  }, {\n    id: 'caughtFish',\n    value: ['アジ', 'ブリ'],\n    handleChange: setCaughtFIsh\n  }, {\n    id: 'comment',\n    value: 'テストコメント',\n    handleChange: setComment\n  }]; // const orderedColumns = useRef<Column[]>();\n\n  let orderedColumns = []; // ページ初期化\n\n  useEffect(() => {\n    (async () => {\n      console.log('useEffect start'); // 項目定義情報の取得\n\n      const columns = [...textColumns, ...numberColumns, ...picklistColumns, ...textareaColumns]; // サーバーから初期値を取得\n      // 初期値を各項目にセット\n      // columnOrderの順に項目の並び替え\n\n      orderedColumns = sortColumns(record, columns); // console.log(orderedColumns.current);\n    })();\n  }, []);\n\n  const submit = async e => {\n    e.preventDefault();\n    const data = {\n      place: place,\n      wind: wind,\n      caughtFish: caughtFish,\n      comment: commnet\n    };\n    console.log(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledOuter, {\n    children: /*#__PURE__*/_jsxDEV(StyledWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(StyledContainer, {\n        children: orderedColumns.map(oc => {\n          if (isInput(oc)) {\n            return /*#__PURE__*/_jsxDEV(MFInput, {\n              label: oc.label,\n              id: oc.id,\n              input: oc.input,\n              value: oc.value,\n              handleChange: oc.handleChange\n            }, oc.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 36\n            }, this);\n          } else if (isPickList(oc)) {\n            return /*#__PURE__*/_jsxDEV(MFPicklist, {\n              label: oc.label,\n              id: oc.id,\n              select: oc.select,\n              options: oc.options,\n              value: oc.value,\n              handleChange: oc.handleChange\n            }, oc.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 36\n            }, this);\n          } else if (isTextarea(oc)) {\n            return /*#__PURE__*/_jsxDEV(MFTextarea, {\n              label: oc.label,\n              id: oc.id,\n              textarea: oc.textarea,\n              value: oc.value,\n              handleChange: oc.handleChange\n            }, oc.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 36\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submit,\n        children: \"\\u9001\\u4FE1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\n_s(RecordEntryForm, \"DeKAHhqncfkx3rbwzVmv+jg37gM=\");\n\n_c = RecordEntryForm;\n\nconst sortColumns = (record, columns) => {\n  const orderedColumns = [];\n\n  for (let r of record) {\n    for (let c of columns) {\n      if (r.id === c.id) {\n        c.handleChange = r.handleChange;\n        c.value = r.value;\n        orderedColumns.push(c);\n        break;\n      }\n    }\n  }\n\n  return orderedColumns;\n};\n\nconst isInput = column => column.type === 'input';\n\nconst isPickList = column => column.type === 'picklist';\n\nconst isTextarea = column => column.type === 'textarea';\n\nconst StyledOuter = styled.div`\nbackground-color: #eff0f0;\nwidth: 100vw;\nheight: 100vw;\n`;\n_c2 = StyledOuter;\nconst StyledWrapper = styled.div`\nmargin-top: ${header.height};\nwidth: ${container.WIDTH};\nheight: 100vw;\nmargin-left: auto;\nmargin-right: auto;\nbackground-color: #ffffff;\n`;\n_c3 = StyledWrapper;\nconst StyledContainer = styled.div`\ndisplay: grid;\npadding-top: 100px;\ngrid-auto-rows: 150px;\ngrid-template-columns: 50% 50%;\n`;\n_c4 = StyledContainer;\nexport default RecordEntryForm;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"RecordEntryForm\");\n$RefreshReg$(_c2, \"StyledOuter\");\n$RefreshReg$(_c3, \"StyledWrapper\");\n$RefreshReg$(_c4, \"StyledContainer\");","map":{"version":3,"sources":["C:/Users/klose/workspace/myfishing/src/component/form/recordEntryForm.tsx"],"names":["useEffect","useState","MFPicklist","MFInput","MFTextarea","textColumns","numberColumns","picklistColumns","textareaColumns","styled","header","container","RecordEntryForm","place","setPlace","wind","setWind","caughtFish","setCaughtFIsh","commnet","setComment","record","id","value","handleChange","orderedColumns","console","log","columns","sortColumns","submit","e","preventDefault","data","comment","map","oc","isInput","label","input","isPickList","select","options","isTextarea","textarea","r","c","push","column","type","StyledOuter","div","StyledWrapper","height","WIDTH","StyledContainer"],"mappings":";;;AAAA,SAASA,SAAT,EAA4BC,QAA5B,QAAiE,OAAjE;AACA,SAASC,UAAT,QAA2B,8BAA3B;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,UAAT,QAA2B,8BAA3B;AAEA,SAASC,WAAT,EAAsBC,aAAtB,EAAqCC,eAArC,EAAsDC,eAAtD,QAA6E,0BAA7E;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,YAAlC;;;AAEA,MAAMC,eAAoB,GAAG,MAAM;AAAA;;AAC/B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,CAAC,EAAD,CAAD,CAA5C;AACA,QAAM,CAACkB,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,EAAD,CAAtC,CAL+B,CAO/B;AACA;;AACA,QAAMoB,MAAgB,GAAG,CACrB;AACIC,IAAAA,EAAE,EAAE,OADR;AAEIC,IAAAA,KAAK,EAAE,MAFX;AAGIC,IAAAA,YAAY,EAAEV;AAHlB,GADqB,EAMrB;AACIQ,IAAAA,EAAE,EAAE,MADR;AAEIC,IAAAA,KAAK,EAAE,CAFX;AAGIC,IAAAA,YAAY,EAAER;AAHlB,GANqB,EAWrB;AACIM,IAAAA,EAAE,EAAE,YADR;AAEIC,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,IAAP,CAFX;AAGIC,IAAAA,YAAY,EAAEN;AAHlB,GAXqB,EAgBrB;AACII,IAAAA,EAAE,EAAE,SADR;AAEIC,IAAAA,KAAK,EAAE,SAFX;AAGIC,IAAAA,YAAY,EAAEJ;AAHlB,GAhBqB,CAAzB,CAT+B,CAgC/B;;AACA,MAAIK,cAAwB,GAAG,EAA/B,CAjC+B,CAmC/B;;AACAzB,EAAAA,SAAS,CAAC,MAAK;AACX,KACI,YAAY;AACR0B,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EADQ,CAEJ;;AACA,YAAMC,OAAiB,GAAG,CAAC,GAAGvB,WAAJ,EAAiB,GAAGC,aAApB,EAAmC,GAAGC,eAAtC,EAAuD,GAAGC,eAA1D,CAA1B,CAHI,CAKJ;AAEA;AAEA;;AACAiB,MAAAA,cAAc,GAAGI,WAAW,CAACR,MAAD,EAASO,OAAT,CAA5B,CAVI,CAWJ;AACP,KAbL;AAcC,GAfI,EAgBR,EAhBQ,CAAT;;AAkBA,QAAME,MAAM,GAAE,MAAOC,CAAP,IAA4B;AACtCA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,IAAI,GAAG;AACTpB,MAAAA,KAAK,EAAEA,KADE;AAETE,MAAAA,IAAI,EAAEA,IAFG;AAGTE,MAAAA,UAAU,EAAEA,UAHH;AAITiB,MAAAA,OAAO,EAAEf;AAJA,KAAb;AAMAO,IAAAA,OAAO,CAACC,GAAR,CAAYM,IAAZ;AAEH,GAVD;;AAYA,sBACI,QAAC,WAAD;AAAA,2BACI,QAAC,aAAD;AAAA,8BACI,QAAC,eAAD;AAAA,kBACKR,cAAc,CAACU,GAAf,CAAoBC,EAAD,IAAM;AACtB,cAAIC,OAAO,CAACD,EAAD,CAAX,EAAiB;AACb,gCAAO,QAAC,OAAD;AACK,cAAA,KAAK,EAAEA,EAAE,CAACE,KADf;AAEK,cAAA,EAAE,EAAEF,EAAE,CAACd,EAFZ;AAGK,cAAA,KAAK,EAAEc,EAAE,CAACG,KAHf;AAKK,cAAA,KAAK,EAAEH,EAAE,CAACb,KALf;AAMK,cAAA,YAAY,EAAEa,EAAE,CAACZ;AANtB,eAIUY,EAAE,CAACd,EAJb;AAAA;AAAA;AAAA;AAAA,oBAAP;AAOH,WARD,MAQM,IAAIkB,UAAU,CAACJ,EAAD,CAAd,EAAoB;AACtB,gCAAO,QAAC,UAAD;AACK,cAAA,KAAK,EAAEA,EAAE,CAACE,KADf;AAEK,cAAA,EAAE,EAAEF,EAAE,CAACd,EAFZ;AAGK,cAAA,MAAM,EAAEc,EAAE,CAACK,MAHhB;AAIK,cAAA,OAAO,EAAEL,EAAE,CAACM,OAJjB;AAMK,cAAA,KAAK,EAAEN,EAAE,CAACb,KANf;AAOK,cAAA,YAAY,EAAEa,EAAE,CAACZ;AAPtB,eAKUY,EAAE,CAACd,EALb;AAAA;AAAA;AAAA;AAAA,oBAAP;AAQH,WATK,MASA,IAAIqB,UAAU,CAACP,EAAD,CAAd,EAAmB;AACrB,gCAAO,QAAC,UAAD;AACK,cAAA,KAAK,EAAEA,EAAE,CAACE,KADf;AAEK,cAAA,EAAE,EAAEF,EAAE,CAACd,EAFZ;AAGK,cAAA,QAAQ,EAAEc,EAAE,CAACQ,QAHlB;AAKK,cAAA,KAAK,EAAER,EAAE,CAACb,KALf;AAMK,cAAA,YAAY,EAAEa,EAAE,CAACZ;AANtB,eAIUY,EAAE,CAACd,EAJb;AAAA;AAAA;AAAA;AAAA,oBAAP;AAOH;AACJ,SA3BA;AADL;AAAA;AAAA;AAAA;AAAA,cADJ,eA+BI;AAAQ,QAAA,OAAO,EAAGQ,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAqCH,CAvGD;;GAAMlB,e;;KAAAA,e;;AAyGN,MAAMiB,WAAW,GAAG,CAACR,MAAD,EAAkBO,OAAlB,KAAgD;AAChE,QAAMH,cAAwB,GAAG,EAAjC;;AAEA,OAAK,IAAIoB,CAAT,IAAcxB,MAAd,EAAsB;AAClB,SAAI,IAAIyB,CAAR,IAAalB,OAAb,EAAqB;AACjB,UAAGiB,CAAC,CAACvB,EAAF,KAASwB,CAAC,CAACxB,EAAd,EAAiB;AACbwB,QAAAA,CAAC,CAACtB,YAAF,GAAiBqB,CAAC,CAACrB,YAAnB;AACAsB,QAAAA,CAAC,CAACvB,KAAF,GAAUsB,CAAC,CAACtB,KAAZ;AACAE,QAAAA,cAAc,CAACsB,IAAf,CAAoBD,CAApB;AACA;AACH;AACJ;AACJ;;AACD,SAAOrB,cAAP;AACH,CAdD;;AAgBA,MAAMY,OAAO,GAAIW,MAAD,IAA2DA,MAAM,CAACC,IAAP,KAAgB,OAA3F;;AACA,MAAMT,UAAU,GAAIQ,MAAD,IAA8CA,MAAM,CAACC,IAAP,KAAgB,UAAjF;;AACA,MAAMN,UAAU,GAAIK,MAAD,IAA8CA,MAAM,CAACC,IAAP,KAAgB,UAAjF;;AAEA,MAAMC,WAAW,GAAEzC,MAAM,CAAC0C,GAAI;AAC9B;AACA;AACA;AACA,CAJA;MAAMD,W;AAMN,MAAME,aAAa,GAAE3C,MAAM,CAAC0C,GAAI;AAChC,cAAczC,MAAM,CAAC2C,MAAO;AAC5B,SAAS1C,SAAS,CAAC2C,KAAM;AACzB;AACA;AACA;AACA;AACA,CAPA;MAAMF,a;AASN,MAAMG,eAAe,GAAE9C,MAAM,CAAC0C,GAAI;AAClC;AACA;AACA;AACA;AACA,CALA;MAAMI,e;AAON,eAAe3C,eAAf","sourcesContent":["import { useEffect, useRef, useState, VFC, SyntheticEvent } from 'react';\r\nimport { MFPicklist } from 'component/column/mf_picklist';\r\nimport { MFInput } from 'component/column/mf_input';\r\nimport { MFTextarea } from 'component/column/mf_textarea';\r\nimport { Column, TextColumn, NumberColumn, PicklistColumn, TextareaColumn, Record } from 'component/column/columnDef';\r\nimport { textColumns, numberColumns, picklistColumns, textareaColumns } from 'component/column/columns';\r\nimport styled from \"styled-components\";\r\nimport { header, container } from 'const/size';\r\n\r\nconst RecordEntryForm: VFC = () => {\r\n    // 各項目のuseStateを宣言\r\n    const [place, setPlace] = useState('');\r\n    const [wind, setWind] = useState(0);\r\n    const [caughtFish, setCaughtFIsh] = useState(['']);\r\n    const [commnet, setComment] = useState('');\r\n\r\n    // テストで初期値としてvalueを設定\r\n    // 実際はサーバから初期値を取得する\r\n    const record: Record[] = [\r\n        {\r\n            id: 'place',\r\n            value: '大洗漁港',\r\n            handleChange: setPlace,\r\n        },\r\n        {\r\n            id: 'wind',\r\n            value: 5,\r\n            handleChange: setWind,\r\n        },\r\n        {\r\n            id: 'caughtFish',\r\n            value: ['アジ', 'ブリ'],\r\n            handleChange: setCaughtFIsh,\r\n        },\r\n        {\r\n            id: 'comment',\r\n            value: 'テストコメント',\r\n            handleChange: setComment,\r\n        },\r\n    ]    \r\n\r\n    // const orderedColumns = useRef<Column[]>();\r\n    let orderedColumns: Column[] = [];\r\n\r\n    // ページ初期化\r\n    useEffect(()=> {\r\n        (\r\n            async () => {\r\n                console.log('useEffect start');\r\n                    // 項目定義情報の取得\r\n                    const columns: Column[] = [...textColumns, ...numberColumns, ...picklistColumns, ...textareaColumns];\r\n            \r\n                    // サーバーから初期値を取得\r\n                    \r\n                    // 初期値を各項目にセット\r\n            \r\n                    // columnOrderの順に項目の並び替え\r\n                    orderedColumns = sortColumns(record, columns);\r\n                    // console.log(orderedColumns.current);\r\n            })()\r\n        }\r\n    ,[])\r\n    \r\n    const submit =async (e: SyntheticEvent)=> {\r\n        e.preventDefault();\r\n        const data = {\r\n            place: place,\r\n            wind: wind,\r\n            caughtFish: caughtFish,\r\n            comment: commnet,\r\n        }\r\n        console.log(data);\r\n\r\n    }\r\n\r\n    return (\r\n        <StyledOuter>\r\n            <StyledWrapper>\r\n                <StyledContainer>\r\n                    {orderedColumns.map((oc)=>{\r\n                        if( isInput(oc) ){\r\n                            return <MFInput\r\n                                        label={oc.label}\r\n                                        id={oc.id}\r\n                                        input={oc.input}\r\n                                        key={oc.id}\r\n                                        value={oc.value}\r\n                                        handleChange={oc.handleChange}></MFInput>\r\n                        }else if( isPickList(oc) ){\r\n                            return <MFPicklist\r\n                                        label={oc.label}\r\n                                        id={oc.id}\r\n                                        select={oc.select}\r\n                                        options={oc.options}\r\n                                        key={oc.id}\r\n                                        value={oc.value}\r\n                                        handleChange={oc.handleChange}></MFPicklist>\r\n                        }else if( isTextarea(oc)){\r\n                            return <MFTextarea\r\n                                        label={oc.label}\r\n                                        id={oc.id}\r\n                                        textarea={oc.textarea}\r\n                                        key={oc.id}\r\n                                        value={oc.value}\r\n                                        handleChange={oc.handleChange}></MFTextarea>\r\n                        }\r\n                    })}\r\n                </StyledContainer>\r\n                <button onClick={ submit }>送信</button>\r\n            </StyledWrapper>\r\n        </StyledOuter>\r\n    )\r\n}\r\n\r\nconst sortColumns = (record:Record[], columns:Column[]):Column[] => {\r\n    const orderedColumns: Column[] = [];\r\n\r\n    for( let r of record ){\r\n        for(let c of columns){\r\n            if(r.id === c.id){\r\n                c.handleChange = r.handleChange;\r\n                c.value = r.value;\r\n                orderedColumns.push(c);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return orderedColumns;\r\n}\r\n\r\nconst isInput = (column: Column): column is (TextColumn | NumberColumn) => column.type === 'input';\r\nconst isPickList = (column: Column): column is PicklistColumn => column.type === 'picklist';\r\nconst isTextarea = (column: Column): column is TextareaColumn => column.type === 'textarea';\r\n\r\nconst StyledOuter =styled.div`\r\nbackground-color: #eff0f0;\r\nwidth: 100vw;\r\nheight: 100vw;\r\n`;\r\n\r\nconst StyledWrapper =styled.div`\r\nmargin-top: ${header.height};\r\nwidth: ${container.WIDTH};\r\nheight: 100vw;\r\nmargin-left: auto;\r\nmargin-right: auto;\r\nbackground-color: #ffffff;\r\n`;\r\n\r\nconst StyledContainer =styled.div`\r\ndisplay: grid;\r\npadding-top: 100px;\r\ngrid-auto-rows: 150px;\r\ngrid-template-columns: 50% 50%;\r\n`;\r\n\r\nexport default RecordEntryForm;"]},"metadata":{},"sourceType":"module"}